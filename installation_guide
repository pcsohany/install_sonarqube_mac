1. Install JDK 17
-----------------
#Download and install OpenJDK 17 using brew (Homebrew is required; if not installed, visit brew.sh for instructions):
brew install openjdk@17

#Exporting manually the java home variable
export JAVA_HOME=/usr/local/opt/openjdk@17
export 'JAVA_HOME=/usr/local/opt/openjdk@17' >> ~/.zshrc

#Create Symlink
sudo ln -sfn /usr/local/opt/openjdk@17/bin/java /usr/local/bin/java

#Check Version
$JAVA_HOME/bin/java -version

#Restart your terminal if below command works you can go ahead.
java -version


2. Create the sonarqube User and sonarqube group
------------------------------------------------
#Check if sonarqube user already exists
dscl . list /Users | grep sonarqube

#Create Home directory for sonarqube
sudo mkdir -p /Users/sonarqube


#Create sonarqube user with password
sudo dscl . -create /Users/sonarqube
sudo dscl . -create /Users/sonarqube UserShell /bin/bash
sudo dscl . -create /Users/sonarqube RealName "SonarQube User"
sudo dscl . -create /Users/sonarqube UniqueID "1001"
sudo dscl . -create /Users/sonarqube PrimaryGroupID 1001
sudo dscl . -create /Users/sonarqube NFSHomeDirectory /Users/sonarqube
sudo dscl . -passwd /Users/sonarqube <your_password>

#Set Home directory for sonarqube user
sudo dscl . -create /Users/sonarqube NFSHomeDirectory /Users/sonarqube

#Create sonarqube group
sudo dscl . -create /Groups/sonarqube
sudo dscl . -create /Groups/sonarqube gid 1001
sudo dscl . -append /Groups/sonarqube GroupMembership sonarqube

#Set ownership
sudo chown -R sonarqube:sonarqube /Users/sonarqube

#Verify the user and group creation
dscl . -read /Users/sonarqube
dscl . -read /Groups/sonarqube


3. Add the SonarQube User to the sudoers List
----------------------------------------------
#Edit the sudoers file using:
sudo visudo

#Add this line to grant sonarqube user the sudo access:
sonarqube ALL=(ALL) NOPASSWD:ALL

4. Download SonarQube Community Version
---------------------------------------
#Download the SonarQube package using wget (or install wget using brew install wget):
wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-10.1.0.73491.zip

5. Move and Extract SonarQube
-----------------------------
#Move the downloaded SonarQube archive to the /opt directory:
sudo mkdir -p /opt/sonarqube
sudo mv sonarqube-10.1.0.73491.zip /opt/sonarqube/
cd /opt/sonarqube
sudo unzip sonarqube-10.1.0.73491.zip

6. Change Ownership of the SonarQube Directory Recursively
----------------------------------------------------------
sudo chown -R sonarqube:sonarqube /opt/sonarqube/sonarqube-10.1.0.73491

7. Switch to sonarqube user
---------------------------
sudo su - sonarqube

8. Navigate to directory and START SonarQube it can take some minutes due to elasticsearch also built in requires more time
---------------------------------------------------------------------------------------------------------------------------
cd /opt/sonarqube/sonarqube-10.1.0.73491/bin/macosx-universal-64/
./sonar.sh start

#Check Status
./sonar.sh status

9. Open SonarQube in Browser login: admin, admin, change password ( it will auto popup )
----------------------------
http://localhost:9000/

10. Enjoy using SonarQube
-------------------------
P.S: Let your terminal run, if you close or exit the program will stop
if you want to be permantly running ( until MAC reboot ) send it to background

#1 run it in the background, if you close terminal program will exit
./sonar.sh start &

#2 execute the below command if you want it to run even if closing terminal
disown

#3 Method 2: you can even close your terminal
nohup ./sonar.sh start > sonar.log 2>&1 &

#to close the program use the stop or ps -ef | grep sonar and kill -9 PID

Important: Your router may need to set NAT port forwarding from port 9000 to 9000 or from 9000 internal to 8080 external.
Some Internet provider could block all traffic goes out from your public IPv4 address hence the provider need to allow out/incoming traffic 
However traffic on http is unsecure and is not best practice, this only should use for learn/test purpose.
Gilab can not communicate to your local ip:9000 by default. Gitlab runner using tokens for communication.
Exposing port 9000 to your public IP is a critical risk and not suggested.


if nothing above works you will need external dns support eg:reverse proxy/nginx, NGrok or similar to expose your local service
NGrok is the fastest way

11. Install ngrok:
------------------
brew install ngrok/ngrok/ngrok

12. sign-up or login with oauth eg: google account
--------------------------------------------------
follow the instruction you will see the commands and your account token. Once you have logged in, Go to your terminal/Visual Code

13. Set up token to commincate with ngrok proxy service
-------------------------------------------------------
ngrok config add-authtoken 2hPl3XyieqgOj_6your_super_secret_temporary_token

#Expose your local service. You can use IP address as well from your Inet is a private IPv4. see here: ifconfig -a 192.168.0.176 example

14. START NGROK and see the public address of NGrok proxy tunnel.
-----------------------------------------------------------------
ngrok http http://localhost:9000  or http://192.168.0.176:9000 etc..

15. Go to Gilab edit your CI/CD Variable to the NGrok temporary public address
------------------------------------------------------------------------------

Edit your .gitlab-ci.yml as well with the ngrok url!!!
#Note that ngrok will have every time different url once you stop/resart NGrok

Booom. rerun pipeline, for first step I added a curl install and curl ngrok adress command to check at the firsst stage if my sonarQube have response
to the Gitlab environment.


Published at 2024.10.27: Peter Csohany 5X AWS Certified, Instrument-IT

my example .gitlab-ci.yml config. This is a Python Project.

stages:
  - test
  - build-gitlab-package
  - publish-to-artifacts
  - docker-build-stage
  - aws-ecr-push-stage
  - sonarqube-stage


test:
  image: debian:latest
  services:
    - name: docker:dind
      command: ["--host=tcp://0.0.0.0:2375", "--insecure-registry=192.168.0.176"] #this command only need if the solution works without proxy and your router let expose your local to public internet without proxy
  stage: test
  script:
    - apt-get update && apt-get install -y curl  # Install curl
    - curl https://cc0e-33-44-55-66.ngrok-free.app/api/server/version #test gitlab sonar connection with the great middleman Ngrok proxy tunneling service helper


build:
  stage: build-gitlab-package
  image: python:3.12
  script:
    - pip install setuptools wheel twine
    # Automatically create a unique version based on the current date and time.
    - export VERSION=$(date +'%Y%m%d%H%M%S')
    - sed -i "s/version='.*'/version='$VERSION'/" setup.py
    - python setup.py sdist bdist_wheel

  artifacts:
    paths:
      - dist/*.whl
      - dist/*.tar.gz

publish:
  stage: publish-to-artifacts
  image: python:3.12
  script:
    - pip install twine
    - twine upload --repository-url https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/packages/pypi dist/*
  variables:
    TWINE_USERNAME: "gitlab-ci-token"
    TWINE_PASSWORD: $CI_JOB_TOKEN

build_docker_image:
  stage: docker-build-stage
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID .
  after_script:
    - docker images

aws_ecr_push:
  stage: aws-ecr-push-stage
  image: docker:latest
  
  services:
    - name: docker:dind
      command: ["--host=tcp://0.0.0.0:2375", "--insecure-registry=192.168.0.176"]
  variables:
    DOCKER_DRIVER: overlay2
  script:
    # Install the AWS CLI directly using apk
    - apk add --no-cache aws-cli
    # Configure AWS credentials
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    # Verify AWS CLI configuration
    - aws sts get-caller-identity
    # Build the Docker image locally
    - docker build -t gokumodoro:$CI_PIPELINE_IID .
    # Tag the Docker image for AWS ECR
    - docker tag gokumodoro:$CI_PIPELINE_IID $AWS_ECR_REGISTRY/instrument-it:latest
    # Login to AWS ECR
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
    # Push the Docker image to ECR
    - docker push $AWS_ECR_REGISTRY/instrument-it:latest
    # List images to verify the successful push
    - docker images

sonarqube-check:
  stage: sonarqube-stage
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'





